= DAM: Entorns de Desenvolupament
Jaume Barceló Vicens

== Control de versions

=== Recurs: Llibre Pro Git

Aquest llibre en anglès conté tot el que necessitem per aprendre git.

https://git-scm.com/book/en/v2

=== Link tutorial Git ULTRAFAST!

* https://www.youtube.com/watch?v=QGKTdL7GG24

* https://www.youtube.com/watch?v=udughzlN5M4

=== Activitat: Familiarització amb el control de versions

Farem un treball per parelles flexibles (d'1, 2 o 3)  explicant què és el control de versions, per a què serveix, etc. Es poden posar exemples de diferents sistemes de control de versions i explicar la diferència entre els centralitzats i els distribuïts.

=== Recurs: Try Git

Aquesta web ens guiarà en una sèrie de passes bàsiques per aprendre git.

https://try.github.io/ 

=== Activitat: Guia de GitHub "Hello World"

Crea't un compte gratuït de GitHub. 

Hi ha un llistat de guies a:	
https://guides.github.com/

Nosaltres farem la guia "Hello World" per a:

* Crear un repositori.
* Crear una branca i fer-hi un commit.
* Crear un pull request
* Fer un merge del pull request.

=== Activitat: Fer un "Pull Request"

Fer un "pull request" sobre el repositori

https://github.com/jbarcelo/DAM-ED-gitexercise

canviant la línia que conté el vostre nom.

=== Activitat: Documentar els rols d'integrador/mantenidor de programari i desenvolupador/contribuent.
 
Per parelles flexibles documentar tot el procés de control de versions realitzat tant pel responsable de mantenir el software i integrar canvis com pel programador que fa una contribució. Concretant:

* Integrador: Crea un repositori i hi afegeix commits.
* Integrador: Puja el repositori a github.
* Programador: Fa un fork al repositori.
* Programador: Clona el seu fork per tenir una còpia local sobre la qual treballar.
* Programador: Afegeix el repo de l'integrador com a "remote" "upstream".
* Programador: Crea una branca local en la qual treballar.
* Programador: Fa canvis i commits sobre la seva branca.
* Integrador: Afegeix canvis que són conflictius amb els del programador en la seva còpia local.
* Integrador: Puja els canvis al seu repositori a github.
* Programador: Obté els commits de l'integrador fent un "fetch". Posteriorment fa un merge d'aquests canvis sobre la seva branca de referència "master".
* Programador: Fa un rebase de la seva feina sobre la branca de referència.
* Programador: Resol els conflictes.
* Programador: Puja la branca master actualitzada i la seva branca de treball al seu repositori de github.
* Programador: Fa un pull request de la seva branca de treball sobre la branca de referència de l'integrador.
* Integrador: Rep el pull request.
* Integrador: Afegeix el repositori de github del programador com a repositori remot.
* Integrador: Fa una còpia local de la branca de treball del programador (fetch).
* Integrador: Examina prova la feina del programador.
* Integrador: Fa un merge de la feina del programador sobre la seva branca master.
* Integrador: Fa un push de la seva branca master al repositori a github.
* Integrador: Borra la seva còpia local de la branca de treball del programador (els canvis ja estan integrats a master). Es fa servir `git branch -d -r nom_remote/nom_de_la_branca` per borrar una remote tracking branch.
* Programador: Fa un fetch de la branca master del repositori de l'integrador a github, que ara conté els seus propis canvis.
* Programador: Fa un merge de la branca master d'upstream sobre la seva branca master local, ,incorporant els seus propis canvis.
* Programador: Fa un push al seu github de la branca master actualitzada.
* Programador: Borra la seva branca de treball local, ja que els canvis ja estan integrats a master.
* Programador: Borra la seva branca de treball a github, ja que els canvis ja estan integrats a master.

=== Activitat: Aspectes de git

Saps en quin context feim servir les següents comandes?

* git init
* git diff
* git add
* git status
* git commit
* git log
* git branch
* git checkout
* git merge
* git rebase
* git remote
* git push
* git fetch
* git clone
* git reset
* git commit --amend
* git tag
* git stash

=== Activitat: Git per Eclipse

Documentar els rols d'integrador/mantenidor de programari i desenvolupador/contribuent fent servir eclipse.

=== Activitat: Working directory, index, HEAD

Entendre les diferències entre 
* "working directory" estat actual dels arxius
* "index" o "staging area" on hi ha els canvis que s'inclouran en el proper commit
* HEAD apunta al commit que serà el pare del següent commit

Entendre com afecten git add i git commit a aquestes tres coleccions.

Entendre git reset.

* soft
* mixed
* hard

=== Activitat: Signa els teus commits amb GPG

Segueix les instruccions de github https://help.github.com/articles/signing-commits-with-gpg/ per signar els teus commits amb gpg i que apareguin com a "verified" a github.


=== Activitat: Holy Wars

Entendre que hi ha alternatives i disjuntives que han provocat discusions inacabables.

https://www.youtube.com/watch?v=SsoOG6ZeyUI

* Spaces vs Tabs
* Vi vs EMACS

Recull informació de cada una de les parts de la discussió de "spaces vs tabs" i exposa el teu punt de vista. Explica per quin motius el més important és la consistència i que tots els col·laboradors d'un mateix projecte es posin d'acord en fer-ho de la mateixa manera.
